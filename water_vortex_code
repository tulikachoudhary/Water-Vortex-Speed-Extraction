import cv2
import numpy as np


# Load video
cap = cv2.VideoCapture('watervortex3.mp4')


# Check if video is opened successfully
if not cap.isOpened():
    print("Error opening video file")


# Parameters for Shi-Tomasi corner detection
feature_params = dict(maxCorners=100, qualityLevel=0.3, minDistance=7, blockSize=7)


# Parameters for Lucas-Kanade optical flow
lk_params = dict(winSize=(15, 15), maxLevel=2, criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))


# Color for optical flow visualization
color = np.random.randint(0, 255, (100, 3))


# Take first frame and find corners
ret, old_frame = cap.read()
old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)
p0 = cv2.goodFeaturesToTrack(old_gray, mask=None, **feature_params)


# Create a mask image for drawing purposes
mask = np.zeros_like(old_frame)


# Create variable to store previous frame time
prev_time = None


while True:
    ret, frame = cap.read()
    if not ret:
        break


    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)


    # Calculate optical flow
    p1, st, err = cv2.calcOpticalFlowPyrLK(old_gray, frame_gray, p0, None, **lk_params)


    # Select good points
    good_new = p1[st == 1]
    good_old = p0[st == 1]


    # Calculate the mean speed of the tracked points
    speeds = np.linalg.norm(good_new - good_old, axis=1)
    mean_speed = np.mean(speeds)


    # Draw the tracks
    for i, (new, old) in enumerate(zip(good_new, good_old)):
        a, b = new.ravel()
        c, d = old.ravel()
        mask = cv2.line(mask, (int(a), int(b)), (int(c), int(d)), color[i].tolist(), 2)
        frame = cv2.circle(frame, (int(a), int(b)), 5, color[i].tolist(), -1)


    img = cv2.add(frame, mask)


    # Calculate and display the speed of water
    if prev_time is not None:
        current_time = cap.get(cv2.CAP_PROP_POS_MSEC) / 1000
        dt = current_time - prev_time
        speed_of_water = mean_speed / dt
        cv2.putText(img, f"Speed of water: {speed_of_water:.2f} px/s", (20, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    prev_time = cap.get(cv2.CAP_PROP_POS_MSEC) / 1000


    cv2.imshow('frame', img)
    if cv2.waitKey(25) & 0xFF == ord('q'):
        break


    # Update the previous frame and previous points
    old_gray = frame_gray.copy()
    p0 = good_new.reshape(-1, 1, 2)


# Release resources
cap.release()
cv2.destroyAllWindows()
